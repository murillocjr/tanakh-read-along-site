{
    "componentChunkName": "component---src-templates-docs-js",
    "path": "/forced-alignment",
    "result": {"data":{"site":{"siteMetadata":{"title":"Tanakh Read Along","docsLocation":"https://murillocjr.github.io/tanakh-read-along-site/"}},"mdx":{"fields":{"id":"f3457459-efe3-5740-9248-98dad6f6eefb","title":"Forced Alignment","slug":"/forced-alignment"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Forced Alignment\",\n  \"metaTitle\": \"Tanakh Read Along Karaoke Montreal Forced Aligner Python iOS Android\",\n  \"metaDescription\": \"Tanakh Read Along Karaoke Montreal Forced Aligner Python iOS Android\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Defining the problem and the road to find the solution.\"), mdx(\"h2\", null, \"Forced Alignment\"), mdx(\"p\", null, \"Forced Alignment is the answer to the question:\\n\\\"How can I get the exact timestamp a word appears in an audio file when I have both the audio and the exact text spoken in it?\\\"\"), mdx(\"p\", null, \"But I didn't know that when I started this project, \"), mdx(\"h2\", null, \"Failed Attempts\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"I tried to identify words by detecting the silences between them, but I found that there isn't always a detectable pause between spoken words. For this purpose, I tried ffmpeg and other python \\\"silence detection\\\" libraries.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Since silences alone weren't able to provide enough information to match sounds with text, I tried to add more \\\"points\\\" in the form of phoneme-timestamp pairs using phonemes-detection libraries. For example, the \\\"sh\\\" sound in Hebrew was very well identified by some libraries. These libraries work by taking an audio input and returning a sequence of characters, each with a start and end timestamp.\\xA0\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"With a collection of phonemes matching characters in the text, the results improved considerably, but were still far from something that could be useful or fixable manually in a short amount of time. If it had been possible to fix each Psalms chapter in 10 minutes or less, I probably would have stuck with this procedure.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Seeing that phoneme-to-audio matching is part of the much more complex speech-to-text problem solutions, this trail led me to find that the solutions needed to take into account nuances even for the same person in different situations. I also found out about the lack of trained models for the Hebrew language, among other interesting insights. During that research process, I learned about Forced-Alignment specific libraries.\")), mdx(\"h3\", null, \"What I learned from my failures\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Mainly that it was a solved problem already and the solution is called \\\"Forced Alignment\\\"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Since I needed to check how effective each attempt was, it was necessary to define a data structure to hold the information produced: word, time-start, and time-end. Also a way to quickly hear, check, and verify if the audio interval matched the word. So that data structure and hearing utility are still useful for checking the forced alignment process results.\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#forced-alignment","title":"Forced Alignment"},{"url":"#failed-attempts","title":"Failed Attempts","items":[{"url":"#what-i-learned-from-my-failures","title":"What I learned from my failures"}]}]},"parent":{"relativePath":"forced-alignment.mdx"},"frontmatter":{"metaTitle":"Tanakh Read Along Karaoke Montreal Forced Aligner Python iOS Android","metaDescription":"Tanakh Read Along Karaoke Montreal Forced Aligner Python iOS Android"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/forced-alignment","title":"Forced Alignment"}}},{"node":{"fields":{"slug":"/resources","title":"Media Resources"}}},{"node":{"fields":{"slug":"/forced-alignment/montreal-forced-aligner","title":"Montreal Forced Aligner"}}},{"node":{"fields":{"slug":"/iOS","title":"I OS"}}},{"node":{"fields":{"slug":"/","title":"Tanakh Read Along Project"}}}]}},"pageContext":{"id":"f3457459-efe3-5740-9248-98dad6f6eefb"}},
    "staticQueryHashes": ["2619113677","3706406642","417421954"]}