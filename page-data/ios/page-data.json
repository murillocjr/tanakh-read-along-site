{
    "componentChunkName": "component---src-templates-docs-js",
    "path": "/iOS",
    "result": {"data":{"site":{"siteMetadata":{"title":"Tanakh Read Along","docsLocation":"https://murillocjr.github.io/tanakh-read-along-site/"}},"mdx":{"fields":{"id":"bcaa7437-6356-50f7-ab9e-f00bf2521ec9","title":"I OS","slug":"/iOS"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"For the iOS Project, I decided to use:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SwiftUI for the sound-animation sync effect\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Modular multirepo architecture\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Tried swift package manager, but wasn't able to get it to work as I wanted.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Cocoapods as dependency manager \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"TanakhResources : as an independent framework with the responsibility of provide audio and JSon resources for the app\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The App is currently getting big media files from Google Storage\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"in the event that in the future it becomes necessary to change to other Content Provider, like Amazon S3, Linode, etc. The impact should be minimum to the main App, ideally just a change in pod dependency name should be enough.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"I did try Amazon S3 first, but couldn't get the SDK working, so I opted for Google Firebase \"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Since Firebase use static libraries, it was necessary to add \"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ruby\"\n  }, \"  s.static_framework = true\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"to the TanakhResources .podspec file.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Firebase requires the file \\\"GoogleService-Info.plist\\\" to be added to the main project, but since I'm building this as a Pod it had to be packed along the framework. First I tried to deliver it using a resources bundle :\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ruby\"\n  }, \"    s.resource_bundles = {\\n        'TanakhResources' => ['TanakhResources/Assets/**/*']\\n    }\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"but it failed, not sure if it was because static libraries doesn't work with resources or because it was inside a bundle, in the end what worked was:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ruby\"\n  }, \"   s.resources = ['TanakhResources/Assets/GoogleService-Info.plist']\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Once completed the basic functionallity for TanakhResources:\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"List Locally\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"List from cloud\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Download Text and Audio From Firebase Storage\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Delete local data\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Check for existing local data.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"next step is to publish this independent module to be consumed by the Main App.\\nSince GoogleService-Info.plist contains information for my Google Firebase Account I can't commit that file to the Github repo; so it will be \\\"injected\\\" in place with a script after the pod is cloned.\"))))))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{},"parent":{"relativePath":"iOS.mdx"},"frontmatter":{"metaTitle":null,"metaDescription":null}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/forced-alignment","title":"Forced Alignment"}}},{"node":{"fields":{"slug":"/iOS","title":"I OS"}}},{"node":{"fields":{"slug":"/resources","title":"Media Resources"}}},{"node":{"fields":{"slug":"/","title":"Tanakh Read Along Project"}}},{"node":{"fields":{"slug":"/forced-alignment/montreal-forced-aligner","title":"Montreal Forced Aligner"}}}]}},"pageContext":{"id":"bcaa7437-6356-50f7-ab9e-f00bf2521ec9"}},
    "staticQueryHashes": ["2619113677","3706406642","417421954"]}