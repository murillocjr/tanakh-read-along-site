{
    "componentChunkName": "component---src-templates-docs-js",
    "path": "/android-app",
    "result": {"data":{"site":{"siteMetadata":{"title":"Tanakh Read Along","docsLocation":"https://murillocjr.github.io/tanakh-read-along-site/"}},"mdx":{"fields":{"id":"d17a8c41-0a2f-5723-8a36-9ba33acb02f3","title":"Android App","slug":"/android-app"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Android App\",\n  \"metaTitle\": \"Tanakh Read Along Karaoke Montreal Forced Aligner Python iOS Android \",\n  \"metaDescription\": \"Tanakh Read Along Karaoke Montreal Forced Aligner Python iOS Android \"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"For the Android Project, I decided to use:\"), mdx(\"h2\", null, \"Jetpack Compose\"), mdx(\"p\", null, \"For the animation syncing text and audio in a karaoke-life effect.\"), mdx(\"p\", null, \"Since the Android version was built after the iOS App, I can say that the concept behind Compose is quite similar to SwiftUI. Specially when I basically learned both in the process of making these apps.\"), mdx(\"p\", null, \"So much so that some of my notes on SwiftUI are equally valid for Compose:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"It doesn't happen in a structured, line-after-line instruction execution as I expected. I had the impression that the interface was constantly \\\"scanned\\\" and the reconstruction of components happened continually as well. Android documentation does mention that the composables are not rendered in order but a recomposition occurs when a value that the composable object reads changes.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"There was a FlowRow development done by \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://androidx.tech\"\n  }, \"AndroidX\"), \" for composable objects, but alas I found this dreadful comment on the source code:\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"                // TODO(soboleva): rtl support\\n\")), mdx(\"p\", null, \"which was just what I needed for Hebrew. In the end I was able to patch it to work in RTL.\"), mdx(\"h2\", null, \"Modular Multirepo Architecture\"), mdx(\"p\", null, \"This concept is exactly as in Swift-iOS, just the technology changes.\\nThe goal is to keep component responsibilities as independent as possible. In this case, the task of retrieving data (JSON and WAV) from the cloud was delegated to a separate project, which was then consumed by the main app via Gradle as a Module (named TanakhResources).\"), mdx(\"p\", null, \"TanakhResources is currently getting all the media and text files from Firebase Google Storage; if it becomes necessary in the future to switch to another content provider, such as Amazon S3, Linode, or others, the impact on the main app should be minimal; ideally, a change in gradle dependency name should suffice.\"), mdx(\"p\", null, \"TanakhResources now have the following basic functionalities:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"List Locally\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"List from cloud\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Download Text and Audio From Firebase Storage\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Delete local data\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Check for existing local data.\")), mdx(\"p\", null, \"The module can be consumed by the main App by simply pointing to the location of the locally cloned repository, as I did in my case.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#jetpack-compose","title":"Jetpack Compose"},{"url":"#modular-multirepo-architecture","title":"Modular Multirepo Architecture"}]},"parent":{"relativePath":"android-app.mdx"},"frontmatter":{"metaTitle":"Tanakh Read Along Karaoke Montreal Forced Aligner Python iOS Android ","metaDescription":"Tanakh Read Along Karaoke Montreal Forced Aligner Python iOS Android "}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/progress","title":"Books Synchronization Progress"}}},{"node":{"fields":{"slug":"/","title":"Tanakh Read Along Project"}}},{"node":{"fields":{"slug":"/forced-alignment","title":"Forced Alignment"}}},{"node":{"fields":{"slug":"/ios-app","title":"iOS App"}}},{"node":{"fields":{"slug":"/forced-alignment/montreal-forced-aligner","title":"Montreal Forced Aligner"}}},{"node":{"fields":{"slug":"/resources","title":"Media Resources"}}},{"node":{"fields":{"slug":"/android-app","title":"Android App"}}}]}},"pageContext":{"id":"d17a8c41-0a2f-5723-8a36-9ba33acb02f3"}},
    "staticQueryHashes": ["2619113677","3706406642","417421954"]}