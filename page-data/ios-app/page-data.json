{
    "componentChunkName": "component---src-templates-docs-js",
    "path": "/ios-app",
    "result": {"data":{"site":{"siteMetadata":{"title":"Tanakh Read Along","docsLocation":"https://murillocjr.github.io/tanakh-read-along-site/"}},"mdx":{"fields":{"id":"ec14056d-5210-5072-9b81-a68331863955","title":"iOS App","slug":"/ios-app"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"iOS App\",\n  \"metaTitle\": \"Tanakh Read Along Karaoke Montreal Forced Aligner Python iOS Android\",\n  \"metaDescription\": \"Tanakh Read Along Karaoke Montreal Forced Aligner Python iOS Android\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"For the iOS Project, I decided to use:\"), mdx(\"h2\", null, \"SwiftUI\"), mdx(\"p\", null, \"For the animation syncing text and audio in a karaoke-life effect.\"), mdx(\"p\", null, \"Not being quite an expert on SwiftUI, I spent some time figuring out how each page/view is rendereds, and came to the following conclusions:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It doesn't happen in a structured, line-after-line instruction execution as I expected. I had the impression that the interface was constantly \\\"scanned\\\" and the reconstruction of components happened continually as well.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Trying to sequentially accumulate yPos values to calculate the position of each word-object was a nightmare. Debugging values revealed a non-linear behavior that was throwing my calculations off dramatically. I discovered that storing the calculated x and y positions for each word in an array was the best solution. This allowed me to gain control and predictability since I could determine placements from the array's values rather than depending on the objects' orderly creation.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Alignment Guides saved the day because they can be calculated dynamically dependent on the size of the created word-object. Offsets appear to be considerably more static, making it harder to place an object dynamically. It took some time for me to get comfortable to the axis direction and the calculations that were required.\")), mdx(\"h2\", null, \"Modular Multirepo Architecture\"), mdx(\"p\", null, \"The idea is to separate responsibilities of components as much as possible, in this case, the resposibility of getting data (JSON and WAV) from the cloud was isolated to a whole different project and consumed from the main app as a Framework (called TanakhResources) via Cocoapods.\"), mdx(\"p\", null, \"TanakhResources is currently getting all the media and text files from Firebase Google Storage; in the event that in the future it becomes necessary to change to other Content Provider, like Amazon S3, Linode, etc; the impact should be minimum to the main App, ideally just a change in pod dependency name should be enough.\"), mdx(\"p\", null, \"I did try Amazon S3 first, but couldn't get the SDK working, so I opted for Google Firebase.\"), mdx(\"h3\", null, \"Firebase\"), mdx(\"p\", null, \"Since Firebase use static libraries, it was necessary to add \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ruby\"\n  }, \"    s.static_framework = true\\n\")), mdx(\"p\", null, \"to the TanakhResources .podspec file.\"), mdx(\"p\", null, \"Firebase requires the file \\\"GoogleService-Info.plist\\\" to be accessible by the main project, but since I'm building this as a Pod it had to be packed along the framework. First I tried to deliver it using a resources bundle :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ruby\"\n  }, \"    s.resource_bundles = {\\n        'TanakhResources' => ['TanakhResources/Assets/**/*']\\n    }\\n\")), mdx(\"p\", null, \"but it failed, not sure if it was because static libraries doesn't work with resources or because it was inside a bundle, in the end what worked was:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ruby\"\n  }, \"    s.resources = ['TanakhResources/Assets/GoogleService-Info.plist']\\n\")), mdx(\"p\", null, \"Once completed the basic functionallity for TanakhResources:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"List Locally\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"List from cloud\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Download Text and Audio From Firebase Storage\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Delete local data\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Check for existing local data.\")), mdx(\"p\", null, \"the module can be consumed by the main App via Github or, as in my case, just pointing to the path of the locally cloned repo.\"), mdx(\"p\", null, \"Since GoogleService-Info.plist contains information for my Google Firebase Account I can't commit that file to the Github repo; so it needed to be \\\"injected\\\" in place with a script after the pod is cloned.\"), mdx(\"p\", null, \"At some point I tried to use Swift Package Manager to provide the Framework to the main App, but wasn't able to get it to work as I wanted.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#swiftui","title":"SwiftUI"},{"url":"#modular-multirepo-architecture","title":"Modular Multirepo Architecture","items":[{"url":"#firebase","title":"Firebase"}]}]},"parent":{"relativePath":"ios-app.mdx"},"frontmatter":{"metaTitle":"Tanakh Read Along Karaoke Montreal Forced Aligner Python iOS Android","metaDescription":"Tanakh Read Along Karaoke Montreal Forced Aligner Python iOS Android"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/forced-alignment","title":"Forced Alignment"}}},{"node":{"fields":{"slug":"/","title":"Tanakh Read Along Project"}}},{"node":{"fields":{"slug":"/resources","title":"Media Resources"}}},{"node":{"fields":{"slug":"/forced-alignment/montreal-forced-aligner","title":"Montreal Forced Aligner"}}},{"node":{"fields":{"slug":"/ios-app","title":"iOS App"}}}]}},"pageContext":{"id":"ec14056d-5210-5072-9b81-a68331863955"}},
    "staticQueryHashes": ["2619113677","3706406642","417421954"]}